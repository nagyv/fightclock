// Generated by CoffeeScript 1.4.0
(function() {
  var $counter, $loops, $preset_list, $start_timer, $status, $stop_timer, Counter, CounterSetup, clockUI, counterUI, currentCounter, getSeconds, gong, loopsUI, now, pause_timer, start_the_timer, statusUI, stop_the_timer, toogleUI, zeroPadInteger,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  now = Bacon.fromPoll(1000, function() {
    return new Bacon.Next(Date.now());
  });

  clockUI = document.getElementById('clock');

  now.onValue(function(now) {
    return clockUI.innerHTML = (new Date()).toLocaleTimeString();
  });

  gong = document.getElementById("gong");

  gong.addEventListener("ended", function() {
    gong.currentSrc = gong.currentSrc;
    return gong.load();
  });

  counterUI = document.getElementById('counter');

  loopsUI = document.getElementById("loops");

  statusUI = document.getElementById("status");

  $("form").submit(function(ev) {
    return ev.preventDefault();
  });

  zeroPadInteger = function(num) {
    var str;
    str = "00" + parseInt(num, 10);
    return str.substring(str.length - 2);
  };

  getSeconds = function(timing) {
    var counter, type;
    type = timing.substr(-1);
    counter = timing.substr(0, timing.length - 1);
    switch (type) {
      case 'm':
        return parseFloat(counter) * 60;
      case 's':
        return parseFloat(counter);
    }
  };

  currentCounter = null;

  $counter = $("#counter");

  $loops = $("#loops");

  $status = $("#status");

  $start_timer = $("#start_timer");

  $stop_timer = $("#stop_timer");

  $preset_list = $("#preset_list");

  stop_the_timer = $stop_timer.asEventStream('click');

  start_the_timer = $start_timer.asEventStream('click');

  pause_timer = document.getElementById("pause_timer");

  toogleUI = function() {
    $counter.toggle();
    $loops.toggle();
    $status.toggle();
    $start_timer.toggle();
    return $stop_timer.toggle();
  };

  stop_the_timer.onValue(function() {
    currentCounter.stop();
    return toogleUI();
  });

  start_the_timer.onValue(function() {
    loadPreset(document.getElementById("preset_list").value, true);
    return toogleUI();
  });

  Counter = (function() {

    function Counter(seconds, statusSink) {
      var _this = this;
      this.statusSink = statusSink;
      this.runClock = __bind(this.runClock, this);

      this.expected_end = Date.now() + seconds * 1000;
      this.statusSink.onValue(function(status) {
        switch (status) {
          case "finished":
            return gong.play();
          case "stopped":
            return Bacon.noMore;
        }
      });
      this.run();
    }

    Counter.prototype.runClock = function(now) {
      var minutes, seconds;
      if (now >= this.expected_end) {
        return this.end();
      } else {
        minutes = parseFloat(((this.expected_end - now) / (1000 * 60)) % 60);
        seconds = parseFloat(((this.expected_end - now) / 1000.) % 60);
        return counterUI.innerHTML = zeroPadInteger(minutes) + ':' + zeroPadInteger(seconds);
      }
    };

    Counter.prototype.stop = function() {
      this.statusSink.push("stopped");
      return this.expected_end = Date.now();
    };

    Counter.prototype.pause = function() {
      console.log("TODO: counter stopped");
      return true;
    };

    Counter.prototype.run = function() {
      now.onValue(this.runClock);
      return this.statusSink.push("running");
    };

    Counter.prototype.end = function() {
      this.statusSink.push("finished");
      console.log("TODO: counter ended");
      return Bacon.noMore;
    };

    return Counter;

  })();

  CounterSetup = (function() {

    CounterSetup.prototype.currentCount = 0;

    function CounterSetup(options) {
      var timing,
        _this = this;
      this.options = options;
      this.status = new Bacon.Bus();
      this.loopCounter = options.loops;
      this.countDowns = (function() {
        var _i, _len, _ref, _results;
        _ref = options.clock;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          timing = _ref[_i];
          _results.push(getSeconds(timing));
        }
        return _results;
      })();
      this.status.onValue(function(status) {
        statusUI.innerHTML = status;
        switch (status) {
          case "running":
            console.log('started to run');
            break;
          case "finished":
            return _this.next();
          case "stopped":
            console.log('timer stopped');
            break;
          case "ended":
            console.log("counter setup finished");
            return Bacon.noMore;
        }
      });
      if (options.autoStart) {
        this.play();
      }
    }

    CounterSetup.prototype.play = function() {
      this.countDown = new Counter(this.countDowns[this.currentCount++], this.status);
      return loopsUI.innerHTML = "" + this.loopCounter + " loops";
    };

    CounterSetup.prototype.next = function() {
      if (this.countDowns.length > this.currentCount) {
        return this.play();
      } else if (this.loopCounter === 1) {
        return this.status.push("ended");
      } else {
        this.currentCount = 0;
        this.loopCounter--;
        return this.play();
      }
    };

    CounterSetup.prototype.stop = function() {
      this.status.push("ended");
      this.status.end();
      return this.countDown.stop();
    };

    CounterSetup.prototype.pause = function() {
      return this.countDown.pause();
    };

    return CounterSetup;

  })();

  gong.addEventListener("canplay", function() {
    return window.loadClock = function(options) {
      return currentCounter = new CounterSetup(options);
    };
  });

  window.loadClock = function(options) {
    var setUpLoadClock;
    setUpLoadClock = function() {
      loadClock(options);
      return gong.removeEventListener("canplay", setUpLoadClock);
    };
    return gong.addEventListener("canplay", setUpLoadClock);
  };

  window.stopClock = function() {
    return currentCounter.stop();
  };

  $(function() {
    return listPresets($preset_list, _.template("<option value='<%= key %>'><%= name %> (<%= clock.join(', ') %>)</option>"));
  });

}).call(this);
